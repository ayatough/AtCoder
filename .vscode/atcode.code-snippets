{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"mapinput": {
		"scope": "python",
		"prefix": "mapinput",
		"body": [
			"map(int, input().split())",
		],
		"description": "map input"
	},
	"intinput": {
		"scope": "python",
		"prefix": "intinput",
		"body": [
			"int(input())",
		],
		"description": "int input"
	},
	"unionfind": {
		"scope": "python",
		"prefix": "unionfind",
		"body": [
			"class UF(object):",
			"\tdef __init__(self, n):",
			"\t\tself.parent = [i for i in range(n)]",
			"",
			"\tdef root(self, v):",
			"\t\tif v == self.parent[v]:",
			"\t\t\treturn v",
			"\t\telse:",
			"\t\t\tself.parent[v] = self.root(self.parent[v])",
			"\t\t\treturn self.parent[v]",
			"\t",
			"\tdef unite(self, u, v):",
			"\t\tu, v = self.root(u), self.root(v)",
			"\t\tif (u == v):",
			"\t\t\treturn",
			"\t\tself.parent[u] = v",
		]
	}
}